= Pushr

Deploy Rails applications by _Github_ Post-Receive URLs launching _Capistrano's_ tasks (<tt>cap deploy</tt>, <tt>cap staging deploy</tt>) or by pushing button in web GUI and get notifications by _Twitter_, IRC or Jabber.

Why? Because my friend Machal still cannot fix _Capistrano_ on his Windows box and can now deploy with _GitGUI_.
(No need to launch "DOS" for him when only thing he did is fixing some CSS or updating some assets.)

Currently runs deployment for about 5 Rails apps.

== What?

Pushr assumes this:

* You deploy a Rails application with _Capistrano_ in standard settings
* You have a "deploy" branch in your repo, which you deploy on production (and possibly deploy "master" on staging)
* You have installed Capistrano et al. on the server you are deploying
* You have a <tt>deploy.rb</tt> in your repository (and use SSH keys! you should!) or symlink <tt>deploy.rb</tt>
* You are willing and able to run a Ruby application open to teh internet on the same machine as your Rails application
* You are not anxiously awaiting how the <tt>cap deploy</tt> task ends. You just check the results from time to time.
* You have tests for your application and you run them in Capistrano <tt>before</tt> hook (so you don't end up deploying breakz)
* You have set a <i>post-receive</i> hook for your repository, calling specific URL. See section below for Github guide.

_Pushr_ calls _Capistrano's_ deploy task specified in <tt>config.yml</tt> (or <tt>deploy:migrations</tt> by default)
whenever you push to the repository with the hook.

You can also deploy by literally pushing a button in _Pushr's_ web-interface.

_Pushr_ logs the _Capistrano_ output into a file and updates status for configured _Twitter_ account (the default notification).

You can setup more notifiers in <tt>config.yml</tt> file. Currently these are provided:

* IRC         (http://github.com/karmi/pushr_notifiers/blob/master/irc.rb)
* XMPP/Jabber (http://github.com/karmi/pushr_notifiers/blob/master/jabber.rb)

You can easily add more notifiers: they are modeled after _Ingerity_ notifiers (http://integrityapp.com/notifiers), so it would be very, very easy to adapt those.


== Want to try it out?

Install or update following _Rubygems_ <b>on the local machine or server where you want to run it</b>:

    $ sudo gem install sinatra rack haml capistrano capistrano-ext thin

Rename and edit the configuration file:

    $ cp config.example.yml config.yml
    $ vim config.yml

Run the app in development mode:

    rake
    
Set <b>Github Post-Receive URL</b> (http://github.com/guides/post-receive-hooks) in your repo's administration to:

    http://{USERNAME SET IN CONFIG}:{PASSWORD SET IN CONFIG}@{YOUR SERVER}:4000
    
Load the URL in the browser. Fill the ugly HTTP-Auth box with the credentials from <tt>config.yml</tt>.
You should see some info about deployed revision.
    
Click "Test Hook" at _Github_ or do a <tt>git push</tt> to the git repo. You should see something POSTed in your terminal. 
Your application is updated with Capistrano. Done.

Of course, You can use _Pushr_ without _Github_, obviously: you just need to setup a post-receive hook in your <tt>.git/hooks/post-receive</tt> with _curl_ or something like that.

If you're satisfied with what you see, you should run and control Pushr backed-up with _Thin_ by <tt>rake start</tt>/<tt>rake stop</tt>.

Follow Twitter username you set in <tt>config.yml</tt> on Twitter for notifications. Run <tt>tail -f deploy.log</tt> to see what's really going on.

NOTE: Notifiers would require more gems, obviously, such as Jabber would require the +xmppr+ gem.


== More information

Get more information in these articles: 

* http://www.restafari.org/pushr-or-the-application-will-deploy-itself.html <small>(November 2008)</small>
* http://www.restafari.org/capistrano-pushr-now-better.html <small>(December 2008)</small>
* http://www.restafari.org/capistrano-pushr-refactored-with-more-notifiers.html <small>(January 2009)</small>


== Todos

* [!] Visualize deploy.log on webpage in a sparkline graph (succeeded/failed deploys, show relevant portion of deploy.log for each deploy, etc)

