= Pushr

Deploy Rails applications by Github Post-Receive URLs launching Capistrano's <tt>cap deploy</tt>

Why? Because my friend Machal still cannot fix Capistrano on his Windows box and can now deploy with _GitGUI_. (No need to launch "DOS" for him when only thing he did is fixing some CSS or updating some assets.)

Because it could be cool, what you think?

It's a working experiment at the moment! AN APLHA! :) Obviously, do not use on mission critical deployments.


== What?

Pushr assumes this:

* You deploy a Rails application with Capistrano in standard settings
* You have a "deploy" branch in your repo, which you deploy on production (and possibly deploy "master" on staging)
* You have installed Capistrano et al. on the server you are deploying
* You have a <tt>deploy.rb</tt> in your repository (and use SSH keys! you should!) or symlink <tt>deploy.rb</tt>
* You are willing and able to run a Ruby application open to teh internet on the same machine as your Rails application
* You are not anxiously awaiting how the <tt>cap deploy</tt> task ends. You just check the results from time to time.
* You have tests for your application and you run them in Capistrano <tt>before</tt> hook (so you don't end up deploying breakz)
* You have set a <i>post-receive</i> hook for your repository, calling specific URL. See section below for Github guide.

Pushr calls Capistrano's <tt>cap deploy</tt> task whenever you push to the repository with the hook.

Currently it logs the output into a file and updates status for configured Twitter account. Other notifications? Sure, later.

You can also deploy by literally pushing a button on Pushr's page.


== Want to try it out?

Install or update following Rubygems <b>on the local machine or server where you want to run it</b>:

    $ sudo gem install sinatra rack haml capistrano capistrano-ext

Rename and edit the configuration file:

    $ cp config.example.yml config.yml
    $ vim config.yml

Run the app in production (nohup):

    rake start:production
    
Set up Github Post-Receive URL (http://github.com/guides/post-receive-hooks) in your repo's administration to:

    http://{YOUR SERVER}:4000?token={TOKEN SET IN CONFIG}
    
Load the URL in the browser. You should see some info about deployed revision.
    
Then do a <tt>git push</tt> to the git repo. Your application is updated with Capistrano. Done.

(Of course, you can use Git's post-receive hook in any repo, not just on Github. You would be <tt>curl</tt>-ing that URL or something like that then.)


== Todos & Ideas

* Deploy only when pushed to "deploy" branch [!]
* Improve & separate Notifications (Twitter, e-mail, Jabber, ...)
* Improve deploy logging
* List new revisions in "master" branch
